//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace $(RootNamespace).Commands
{
    using System;
    using System.ComponentModel.Design;
    using Microsoft.VisualStudio.Shell;
    
    internal partial class GuidSymbols
    {
        public const string PackageString = "9F7B718F-0C30-4C9F-92A5-D378853B429B";
        public const string PackageMenusString = "0CFB4A3C-2DE1-4A08-AFDE-6F2A32575BC6";
        public const string PackageGroupsString = "0BC60032-F463-4104-A1AD-9BC6A5444C55";
        public const string PackageCommandsString = "CA1431D8-8FBF-4BA4-B60E-8D0D452C55F6";
        public static Guid Package = new Guid(PackageString);
        public static Guid PackageMenus = new Guid(PackageMenusString);
        public static Guid PackageGroups = new Guid(PackageGroupsString);
        public static Guid PackageCommands = new Guid(PackageCommandsString);
    }
    /// <summary>
    /// Represents the <see cref="IDSymbols"/> class.
    /// </summary>
    internal partial class IDSymbols
    {
        public const int IDM_MENU = 257;
        public const int IDG_GROUP = 17;
        public const int Command = 1;
    }
    /// <summary>
    /// Represents the <see cref="Commands"/> class.
    /// </summary>
    internal partial class Commands
    {
        public static CommandID CommandCommandId = new CommandID(GuidSymbols.PackageCommands, IDSymbols.Command);
    }
    /// <summary>
    ///  Serves as the abstract base for classes that handle commands.
    /// </summary>
    internal abstract partial class AbstractCommandHandler
    {
        /// <summary>
        ///  Initializes a new instance of the <see cref="AbstractCommandHandler"/> class.
        /// </summary>
        protected AbstractCommandHandler()
        {
        }
        /// <summary>
        /// When overridden in a derived class, handles the Command command.
        /// </summary>
        /// <param name="sender">The <see cref="object"/> initiating the command.</param>
        /// <param name="e">The <see cref="EventArgs"/> that will ultimately handle the command.</param>
        public virtual void OnExecuteCommand(object sender, EventArgs e)
        {
        }
    }
    /// <summary>
    ///  Entry point for handling commands.
    /// </summary>
    internal partial class CommandHandler : AbstractCommandHandler
    {
    }
    /// <summary>
    ///  Does the job no one else will do, and registers the commands.
    /// </summary>
    internal partial class CommandRegistrar
    {
        /// <summary>
        /// Registers the commands.
        /// </summary>
        /// <param name="service">the <see cref="OleMenuCommandService"/> that services the commands</param>
        /// <param name="handler">the <see cref="CommandHandler"/> class containing all of the handlers to the commands</param>
        public static void RegisterCommands(OleMenuCommandService service, CommandHandler handler)
        {
            RegisterCommand(service, Commands.CommandCommandId, handler.OnExecuteCommand);
            VSLogger.Log("Registering command Command...");
        }
        /// <summary>
        /// Registers a command.
        /// </summary>
        /// <param name="service">the OleCommandService that services the commands</param>
        /// <param name="cmdId">the CommandID that identifies the command</param>
        /// <param name="commandHanlder">the EventHandler responsible for handling the command</param>
        private static void RegisterCommand(OleMenuCommandService service, CommandID cmdId, EventHandler commandHandler)
        {
            OleMenuCommand command = new OleMenuCommand(commandHandler, cmdId);
            service.AddCommand(command);
        }
    }
}

